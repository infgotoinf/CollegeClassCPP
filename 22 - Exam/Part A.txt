# Билет 8
##1.Реализация сложных условных конструкций, использование логических операторов. Тернарный оператор.
		###Сложные условные конструкции
		Сложные условные конструкции - это конструкции if-else в которых, не поверите, сложные условия,
		то есть длинные, с большим колличесвом аргументов. Вот пример:
		if ((int(a[i]) > 'A' && int(a[i]) <= 'Z') ||
			(int(a[i]) > 'a' && int(a[i]) <= 'z') ||
			(int(a[i]) > '0' && int(a[i]) <= '9') || (a[i] = '_'))
		Условие проверяющее в цикле for каждую букву пароля на то, что она норм, которое я использовал
		в одном из своих дз.

		if([a]() -> bool {
			for (int i : a) {
				if (i == 0) return true;
			}
			return false;
		})
		Условие проверяющее, что массив содержит один (но он немного не работает, но ладно)

		Vector c(a.x1 != b.x1 && a.y1 != b.y1 ? a.x1, a.y1, b.x1, b.y1 : a.x2, a.y2, b.x2, b.y2)
		Тернарное усповие, определяющее вектор третьей стороны треугольника, которое я не помню как
		работает, но помню оно вам понравилсось.

		###Тернарные операторы
		Тернарные операторы - это однострочные if-else конструкции, в которых сначало условие,
		потом вопросик после которого значение, которое выдаётся в случае если оно true и после
		двоеточия значение если false;
		c = (abs(func(a)) > (abs(func(b)); a : b)
		Вот тернарный оператор для дихотомии.

##2.Понятие статической и динамической памяти. Стек и куча. Динамическое выделение памяти.
		###Статическая и динамическая памяти
		Статическая память - это память выделяющаяся при компиляции, а динамическая - это та
		которая выделяется во время работы программы.
		Статическая:
		int a;
		const static const unsigned const long const long const int const b[69];
		Динамическая:
		int* a2 = new int{}
		const static const unsigned const long const long const int* const b2 = new const unsigned const long const long const int const[777] {};

		###Стек и куча
		Стек - это структура first in first out, так работают задачи в C++, к примеру:
		int func(int a) {
			if (func != 10) return func(a + 1);
			return a;
		}
		Тут в функции вызывается функция добавляя её по стеку вверх, то есть func(6), засунет в
		верх по стеку func(7), который засунет func(8)... и так до 10-и и дальше он будет отчищать
		поочереди стек возвращая значение 10 по всем этим функциям (кнш не лучший пример тк то, что
		я сделал называется хвостовой рекурсией или как-то так, поэтому там скорее всего будет сразу
		отчищаться стек, возвращая функцию, но не важно)
		
		Куча - это в принципе то, как работает оперативная память: по каким-то там адресам выделяется
		память для определённых процессов, переменных и всего такого.

		###Динамическое выделение памяти
		Это выделение памяти через тот самый new с длинной, которая может определяется во время
		выполнения программы, к примеру:
		int a = 6;
		int* b = new int[a];

		Или

		int** aa[5];
		for (int i = 0; i < 5; i++) {
			int* bb = new int[i] {i};
			aa[i] = new int* { bb };
		}